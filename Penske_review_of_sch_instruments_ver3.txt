Общие требования
	Пользователь на любое приложение устанавливает расписания модифицирует и удаляет их в любой момент.
	Расписание имеет четыре аттрибута:
	- владелец (адрес рассылки)
	- график
	- название приложения
	- фильтры (возможно название закладки, а может быть набор значений полей)

	Каждый день система должна находить активные (в которые попадает текущий день) расписания. 
	Для каждого расписания 
	- для указанного приложения применить фильтр
	- сделать выгрузку в excel (и/или pdf, csv) отфильтрованной информации
	- отослать пользователю (либо в сетевую папку, либо email, либо в крайнем случае в спец. папку на сервере к которой есть доступ у указанного пользователя)

Publisher
	может нарезать указанное приложение в соотвествии со значениями указанного поля сделав из одного документа несколько документов по числу уникальных значений этого поля. либо обрезать приложение по конкретному значению какого либо поля (полей).
	Созданные приложения он может разложить по указанным папкам или отправить по email. 
	Если для приложения разработан отчет в PDF то возможна выгрузка и рассылка этого отчета на основе нарезанных документов.
	Число заданий и конфигурация каждого задания устанавливаются вручную администратором. 
	То есть это средство не отвечает требованиям:
	- установки расписания пользователем
	- наложения на указанное приложение произвольного фильтра, установленного пользователем
	- выгрузки в форматы, отличные от PDF

	В каждом документе (приложении) можно держать список всех адресов рассылки с полем, отвечающим за необходимость рассылки сегодня.
	при перезагрузке документа в скрипте загрузки определять участвует ли этот адрес в сегодняшней рассылке и выставлять для него флаг.
	Вечером (ночью) Publisher перегружает все документы, выставляются флаги для каждого пользователя нужно ли ему отсылать и после перезагрузки 
	запускается спец. внешний скрипт, накладывающий нужный фильтр в копию документа. В копию попадают адреса только участвующие в рассылке. 
	По этой урезанной по фильтру копии строится отчет и отправляется по адресам, которые Publisher берет из поля с адресами.
	Для наложения фильтров возможно применить такой прием:
	создать vbs скрипт который запускается по расписанию каждый день в планировщике windows. 
	Такому скрипту можно передать имя документа Qlikview, список праметров фильтра. 
	в нем запустить клик, открыть документ и применить к нему букмарк или даже селекшн по разным полям, обрезать данные по текущему фильтру 
	и сохранить обрезанный документ как новый. 
	не знаю насколько это стабильно работает и что будет если файлов будет много и они будут большие, но нарезать файлы с примененными фильтрами можно.
	Не продуманным остается вариант с тем что пользователь на один отчет может поставить несколько фильтров.

NPrinting 
	может экспортировать в Excel, есть возможность наложить любой фильтр, либо закладку. 
	При создании задания на рассылку указывается 
	- приложение, которое будет разослано, 
	- какие фильтры нужно наложить перед экпортом
	- экспорт в выбранный формат (excel, pdf)
	- способ доставки полученного файла (emeail, net path).
	NPrinting оставляет только одно нереализованное требование - установку параметров задания расписания пользователем. 

	По скольку информации о CIA Reports очень мало, не удалось определить есть ли там возможность установить расписание на стороне пользователя, 
	в остальном, похоже, функционал не уступает NPrinting.

	Для реализации заявленных задач пока больше всего подходит NPrinting.

	
	
//		**********************************************************************************************************
		Схема реализации пользовательского расписания с фильтрами по каждому документу с рассылкой через NPrinting
//		**********************************************************************************************************

Общий принцип
	Похоже что в NPrinting нельзя динамически менять расписание, но можно менять адресатов и устанавливать фильтры.
	Откажемся от расписаний NPrinting и будем заставлять его выполнять задания по запросу (External XML Request)
	Для каждого задания на рассылку (task в NPrinting) создадим job (в NPrinting так называется определенная последовательность заданий) 
	в котором перед его выполнением будет импортироваться файл со списком фильтров и пользователей.
	 https://community.qlik.com/docs/DOC-8390
	Для каждого приложения создается файл со списком пользователей и их фильтров, 
	который будет изменяться при каждом изменении параметров рассылок на клиенте.

Особенности реализации документов в QlikView	
	Каждое приложение лежит в отдельной папке. 
	В схеме данных каждого приложения заводим таблицу которая содержит поля - 
	код фильтра, адрес пользователя, значение фильтра, код расписания, описание расписания.
	Значения этой таблицы используем для отображения установленных фильтров и запланированных на рассылку приложений с графиками рассылки.

	Пользователь создает и сохраняет расписание - устанавливает нужные фильтры, выбирает один из вариантов периодичности рассылки.
	 в приложении запускается макрос, который на сервере создает файл DocAll.qvd с 
	 - именем пользователя
	 - списком фильтров
	 - кодом варианта расписания
	Файл DocAll.qvd помещается в папку с создавшим его приложением (это все на сервере, у клиента никаких файлов нет).
	 
	При каждом изменении фильтров изменяется файл DocAll.qvd. 

Reload документа
	При перезагрузке приложения для каждой записи в DocAll.qvd определяем соответствует ли сегодняшний день
	расписанию, указанному в текущей строке. 
	Все такие строки сохраняем в отдельный файл DocAll.csv в ту же папку что и приложение и DocAll.qvd
	Этот файл хранит данные о том по каким адресам СЕГОДНЯ нужно разослать приложения и 
	какие фильтры нужно наложить перед созданием КАЖДОГО отчета (для каждого отчета свой фильтр)
 
Publisher. Планировщик в QlikView.
	Каждый вечер в Publisher происходит перезагрузка каждого приложения.
	Она идет в 3 этапа:
	 - перегружается приложение, в него подгружаются новые данные, по какому-то алгоритму определяются активные для сегодня рассылки. 
	 сам алгоритм и формат в котором будут описаны расписания - предмет дальн. исследований
	 - создается файл DocAll.csv со списком активных рассылок. 
	 - активируется файл с XML запросом для NPrinting который запускает job NPrinting. (переименовывается с *.processed в *.request)

NPrinting
	В NPrinting для каждого документа делаем один task. Этот task включаем в job. 
	В каждый job будет входить еще и task по загрузке адресов, фильтров. 
	в отдельной папке которую мониторит Nprinting создаем файлы docId*.processed - по одному на каждый job
	в этих файлах описан запуск одного job.
	функциональность XML Request позволяет Nprinting запускать указанный в файле job 
	если его расширение *.request. 

	Таким образом после перегрузки приложения вечером запускается задание NPrinting, разсылающие все необходимы на сегодня отчеты.

Пока что это общая схема, которая нуждается в дополнительной доработке и проверке возможности реализации всех пунктов.